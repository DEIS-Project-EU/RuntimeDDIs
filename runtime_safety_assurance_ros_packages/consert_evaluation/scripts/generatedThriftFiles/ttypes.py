'''
MIT License

Copyright (c) 2019 DEIS Project

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TBaseElementUnionType(object):
    BEUTIntegrityLevel = 0
    BEUTSafetyProperty = 1
    BEUTSafetyPropertyType = 2
    BEUTRefinement = 3
    BEUTAbstractConSertInternalElement = 4
    BEUTConSert = 5
    BEUTFunctionalServiceType = 6
    BEUTAbstractService = 7
    BEUTConfiguration = 8
    BEUTSystem = 9
    BEUTSystemOfSystemsConfig = 10
    BEUTConfigCompositionTree = 11
    BEUTConfigTreeNode = 12

    _VALUES_TO_NAMES = {
        0: "BEUTIntegrityLevel",
        1: "BEUTSafetyProperty",
        2: "BEUTSafetyPropertyType",
        3: "BEUTRefinement",
        4: "BEUTAbstractConSertInternalElement",
        5: "BEUTConSert",
        6: "BEUTFunctionalServiceType",
        7: "BEUTAbstractService",
        8: "BEUTConfiguration",
        9: "BEUTSystem",
        10: "BEUTSystemOfSystemsConfig",
        11: "BEUTConfigCompositionTree",
        12: "BEUTConfigTreeNode",
    }

    _NAMES_TO_VALUES = {
        "BEUTIntegrityLevel": 0,
        "BEUTSafetyProperty": 1,
        "BEUTSafetyPropertyType": 2,
        "BEUTRefinement": 3,
        "BEUTAbstractConSertInternalElement": 4,
        "BEUTConSert": 5,
        "BEUTFunctionalServiceType": 6,
        "BEUTAbstractService": 7,
        "BEUTConfiguration": 8,
        "BEUTSystem": 9,
        "BEUTSystemOfSystemsConfig": 10,
        "BEUTConfigCompositionTree": 11,
        "BEUTConfigTreeNode": 12,
    }


class TIntegrityType(object):
    ITSIL = 0
    ITASIL = 1
    ITAgPL = 2

    _VALUES_TO_NAMES = {
        0: "ITSIL",
        1: "ITASIL",
        2: "ITAgPL",
    }

    _NAMES_TO_VALUES = {
        "ITSIL": 0,
        "ITASIL": 1,
        "ITAgPL": 2,
    }


class TAgPLLevel(object):
    AgPL_QM = 0
    AgPL_A = 1
    AgPL_B = 2
    AgPL_C = 3
    AgPL_D = 4
    AgPL_E = 5

    _VALUES_TO_NAMES = {
        0: "AgPL_QM",
        1: "AgPL_A",
        2: "AgPL_B",
        3: "AgPL_C",
        4: "AgPL_D",
        5: "AgPL_E",
    }

    _NAMES_TO_VALUES = {
        "AgPL_QM": 0,
        "AgPL_A": 1,
        "AgPL_B": 2,
        "AgPL_C": 3,
        "AgPL_D": 4,
        "AgPL_E": 5,
    }


class TASILLevel(object):
    ASIL_QM = 0
    ASIL_A = 1
    ASIL_B = 2
    ASIL_C = 3
    ASIL_D = 4

    _VALUES_TO_NAMES = {
        0: "ASIL_QM",
        1: "ASIL_A",
        2: "ASIL_B",
        3: "ASIL_C",
        4: "ASIL_D",
    }

    _NAMES_TO_VALUES = {
        "ASIL_QM": 0,
        "ASIL_A": 1,
        "ASIL_B": 2,
        "ASIL_C": 3,
        "ASIL_D": 4,
    }


class TSILLevel(object):
    SIL_1 = 0
    SIL_2 = 1
    SIL_3 = 2
    SIL_4 = 3

    _VALUES_TO_NAMES = {
        0: "SIL_1",
        1: "SIL_2",
        2: "SIL_3",
        3: "SIL_4",
    }

    _NAMES_TO_VALUES = {
        "SIL_1": 0,
        "SIL_2": 1,
        "SIL_3": 2,
        "SIL_4": 3,
    }


class TConSertGateType(object):
    AND = 0
    OR = 1

    _VALUES_TO_NAMES = {
        0: "AND",
        1: "OR",
    }

    _NAMES_TO_VALUES = {
        "AND": 0,
        "OR": 1,
    }


class TConSertInternalElementUnionType(object):
    CIEUTAbstractSafetyRequirement = 0
    CIEUTRuntimeEvidence = 1
    CIEUTInvariant = 2
    CIEUTConSertGate = 3

    _VALUES_TO_NAMES = {
        0: "CIEUTAbstractSafetyRequirement",
        1: "CIEUTRuntimeEvidence",
        2: "CIEUTInvariant",
        3: "CIEUTConSertGate",
    }

    _NAMES_TO_VALUES = {
        "CIEUTAbstractSafetyRequirement": 0,
        "CIEUTRuntimeEvidence": 1,
        "CIEUTInvariant": 2,
        "CIEUTConSertGate": 3,
    }


class TSafetyRequirementUnionType(object):
    SRUTGuarantee = 0
    SRUTDemand = 1

    _VALUES_TO_NAMES = {
        0: "SRUTGuarantee",
        1: "SRUTDemand",
    }

    _NAMES_TO_VALUES = {
        "SRUTGuarantee": 0,
        "SRUTDemand": 1,
    }


class TServiceUnionType(object):
    SUTRequiredService = 0
    SUTProvidedService = 1

    _VALUES_TO_NAMES = {
        0: "SUTRequiredService",
        1: "SUTProvidedService",
    }

    _NAMES_TO_VALUES = {
        "SUTRequiredService": 0,
        "SUTProvidedService": 1,
    }


class TEpsilonScriptExecutionExceptionUnionType(object):
    ESEEUTConstituentSystemValidationFailedException = 0
    ESEEUTEpsilonScriptExecutionException = 1

    _VALUES_TO_NAMES = {
        0: "ESEEUTConstituentSystemValidationFailedException",
        1: "ESEEUTEpsilonScriptExecutionException",
    }

    _NAMES_TO_VALUES = {
        "ESEEUTConstituentSystemValidationFailedException": 0,
        "ESEEUTEpsilonScriptExecutionException": 1,
    }


class TDemandRef(object):
    """
    Attributes:
     - ref
    """


    def __init__(self, ref=None,):
        self.ref = ref

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ref = TDemand()
                    self.ref.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDemandRef')
        if self.ref is not None:
            oprot.writeFieldBegin('ref', TType.STRUCT, 1)
            self.ref.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGuaranteeRef(object):
    """
    Attributes:
     - ref
    """


    def __init__(self, ref=None,):
        self.ref = ref

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ref = TGuarantee()
                    self.ref.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGuaranteeRef')
        if self.ref is not None:
            oprot.writeFieldBegin('ref', TType.STRUCT, 1)
            self.ref.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRequiredServiceRef(object):
    """
    Attributes:
     - ref
    """


    def __init__(self, ref=None,):
        self.ref = ref

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ref = TRequiredService()
                    self.ref.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRequiredServiceRef')
        if self.ref is not None:
            oprot.writeFieldBegin('ref', TType.STRUCT, 1)
            self.ref.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConfigTreeNodeRef(object):
    """
    Attributes:
     - ref
    """


    def __init__(self, ref=None,):
        self.ref = ref

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ref = TConfigTreeNode()
                    self.ref.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConfigTreeNodeRef')
        if self.ref is not None:
            oprot.writeFieldBegin('ref', TType.STRUCT, 1)
            self.ref.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFunctionalServiceType(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
    """


    def __init__(self, GUID=None, Name="", Description="",):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFunctionalServiceType')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TServiceUnion(object):
    """
    Attributes:
     - RequiredService
     - ProvidedService
    """


    def __init__(self, RequiredService=None, ProvidedService=None,):
        self.RequiredService = RequiredService
        self.ProvidedService = ProvidedService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.RequiredService = TRequiredService()
                    self.RequiredService.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ProvidedService = TProvidedService()
                    self.ProvidedService.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TServiceUnion')
        if self.RequiredService is not None:
            oprot.writeFieldBegin('RequiredService', TType.STRUCT, 1)
            self.RequiredService.write(oprot)
            oprot.writeFieldEnd()
        if self.ProvidedService is not None:
            oprot.writeFieldBegin('ProvidedService', TType.STRUCT, 2)
            self.ProvidedService.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAbstractService(object):
    """
    Attributes:
     - UsedService
     - UsedServiceType
    """


    def __init__(self, UsedService=None, UsedServiceType=None,):
        self.UsedService = UsedService
        self.UsedServiceType = UsedServiceType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.UsedService = TServiceUnion()
                    self.UsedService.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.UsedServiceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAbstractService')
        if self.UsedService is not None:
            oprot.writeFieldBegin('UsedService', TType.STRUCT, 1)
            self.UsedService.write(oprot)
            oprot.writeFieldEnd()
        if self.UsedServiceType is not None:
            oprot.writeFieldBegin('UsedServiceType', TType.I32, 2)
            oprot.writeI32(self.UsedServiceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRequiredService(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - FunctionalServiceType
     - Demands
    """


    def __init__(self, GUID=None, Name="", Description="", FunctionalServiceType=None, Demands=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.FunctionalServiceType = FunctionalServiceType
        if Demands is self.thrift_spec[5][4]:
            Demands = [
            ]
        self.Demands = Demands

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.FunctionalServiceType = TFunctionalServiceType()
                    self.FunctionalServiceType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Demands = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TDemandRef()
                        _elem5.read(iprot)
                        self.Demands.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRequiredService')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.FunctionalServiceType is not None:
            oprot.writeFieldBegin('FunctionalServiceType', TType.STRUCT, 4)
            self.FunctionalServiceType.write(oprot)
            oprot.writeFieldEnd()
        if self.Demands is not None:
            oprot.writeFieldBegin('Demands', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.Demands))
            for iter6 in self.Demands:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TProvidedService(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - FunctionalServiceType
     - IsApplicationService
     - AllocatedRequiredServices
     - Guarantees
    """


    def __init__(self, GUID=None, Name="", Description="", FunctionalServiceType=None, IsApplicationService=None, AllocatedRequiredServices=[
    ], Guarantees=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.FunctionalServiceType = FunctionalServiceType
        self.IsApplicationService = IsApplicationService
        if AllocatedRequiredServices is self.thrift_spec[6][4]:
            AllocatedRequiredServices = [
            ]
        self.AllocatedRequiredServices = AllocatedRequiredServices
        if Guarantees is self.thrift_spec[7][4]:
            Guarantees = [
            ]
        self.Guarantees = Guarantees

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.FunctionalServiceType = TFunctionalServiceType()
                    self.FunctionalServiceType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.IsApplicationService = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.AllocatedRequiredServices = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = TRequiredServiceRef()
                        _elem12.read(iprot)
                        self.AllocatedRequiredServices.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.Guarantees = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = TGuaranteeRef()
                        _elem18.read(iprot)
                        self.Guarantees.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TProvidedService')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.FunctionalServiceType is not None:
            oprot.writeFieldBegin('FunctionalServiceType', TType.STRUCT, 4)
            self.FunctionalServiceType.write(oprot)
            oprot.writeFieldEnd()
        if self.IsApplicationService is not None:
            oprot.writeFieldBegin('IsApplicationService', TType.BOOL, 5)
            oprot.writeBool(self.IsApplicationService)
            oprot.writeFieldEnd()
        if self.AllocatedRequiredServices is not None:
            oprot.writeFieldBegin('AllocatedRequiredServices', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.AllocatedRequiredServices))
            for iter19 in self.AllocatedRequiredServices:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Guarantees is not None:
            oprot.writeFieldBegin('Guarantees', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.Guarantees))
            for iter20 in self.Guarantees:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConfiguration(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - Ranking
     - RequiredServices
     - ProvidedServices
     - ConSert
    """


    def __init__(self, GUID=None, Name="", Description="", Ranking=None, RequiredServices=[
    ], ProvidedServices=[
    ], ConSert=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.Ranking = Ranking
        if RequiredServices is self.thrift_spec[5][4]:
            RequiredServices = [
            ]
        self.RequiredServices = RequiredServices
        if ProvidedServices is self.thrift_spec[6][4]:
            ProvidedServices = [
            ]
        self.ProvidedServices = ProvidedServices
        self.ConSert = ConSert

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.Ranking = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.RequiredServices = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = TRequiredService()
                        _elem26.read(iprot)
                        self.RequiredServices.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.ProvidedServices = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = TProvidedService()
                        _elem32.read(iprot)
                        self.ProvidedServices.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.ConSert = TConSert()
                    self.ConSert.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConfiguration')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Ranking is not None:
            oprot.writeFieldBegin('Ranking', TType.I32, 4)
            oprot.writeI32(self.Ranking)
            oprot.writeFieldEnd()
        if self.RequiredServices is not None:
            oprot.writeFieldBegin('RequiredServices', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.RequiredServices))
            for iter33 in self.RequiredServices:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ProvidedServices is not None:
            oprot.writeFieldBegin('ProvidedServices', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.ProvidedServices))
            for iter34 in self.ProvidedServices:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ConSert is not None:
            oprot.writeFieldBegin('ConSert', TType.STRUCT, 7)
            self.ConSert.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSystem(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - HasApplicationService
     - Configurations
    """


    def __init__(self, GUID=None, Name="", Description="", HasApplicationService=None, Configurations=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.HasApplicationService = HasApplicationService
        if Configurations is self.thrift_spec[5][4]:
            Configurations = [
            ]
        self.Configurations = Configurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.HasApplicationService = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Configurations = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = TConfiguration()
                        _elem40.read(iprot)
                        self.Configurations.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSystem')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.HasApplicationService is not None:
            oprot.writeFieldBegin('HasApplicationService', TType.BOOL, 4)
            oprot.writeBool(self.HasApplicationService)
            oprot.writeFieldEnd()
        if self.Configurations is not None:
            oprot.writeFieldBegin('Configurations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.Configurations))
            for iter41 in self.Configurations:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConfigTreeNode(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - Evaluated
     - Config
     - System
     - RequiredChildNodesRequiredByService
    """


    def __init__(self, GUID=None, Name="", Description="", Evaluated=None, Config=None, System=None, RequiredChildNodesRequiredByService=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.Evaluated = Evaluated
        self.Config = Config
        self.System = System
        if RequiredChildNodesRequiredByService is self.thrift_spec[7][4]:
            RequiredChildNodesRequiredByService = [
            ]
        self.RequiredChildNodesRequiredByService = RequiredChildNodesRequiredByService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.Evaluated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.Config = TConfiguration()
                    self.Config.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.System = TSystem()
                    self.System.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.RequiredChildNodesRequiredByService = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = TRequiredChildConfigNodesByRequiredService()
                        _elem47.read(iprot)
                        self.RequiredChildNodesRequiredByService.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConfigTreeNode')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Evaluated is not None:
            oprot.writeFieldBegin('Evaluated', TType.BOOL, 4)
            oprot.writeBool(self.Evaluated)
            oprot.writeFieldEnd()
        if self.Config is not None:
            oprot.writeFieldBegin('Config', TType.STRUCT, 5)
            self.Config.write(oprot)
            oprot.writeFieldEnd()
        if self.System is not None:
            oprot.writeFieldBegin('System', TType.STRUCT, 6)
            self.System.write(oprot)
            oprot.writeFieldEnd()
        if self.RequiredChildNodesRequiredByService is not None:
            oprot.writeFieldBegin('RequiredChildNodesRequiredByService', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.RequiredChildNodesRequiredByService))
            for iter48 in self.RequiredChildNodesRequiredByService:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRequiredChildConfigNodesByRequiredService(object):
    """
    Attributes:
     - RequiredService
     - ConfigChildNodesProvidingRequiredService
    """


    def __init__(self, RequiredService=None, ConfigChildNodesProvidingRequiredService=[
    ],):
        self.RequiredService = RequiredService
        if ConfigChildNodesProvidingRequiredService is self.thrift_spec[2][4]:
            ConfigChildNodesProvidingRequiredService = [
            ]
        self.ConfigChildNodesProvidingRequiredService = ConfigChildNodesProvidingRequiredService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.RequiredService = TRequiredService()
                    self.RequiredService.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ConfigChildNodesProvidingRequiredService = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = TConfigTreeNodeRef()
                        _elem54.read(iprot)
                        self.ConfigChildNodesProvidingRequiredService.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRequiredChildConfigNodesByRequiredService')
        if self.RequiredService is not None:
            oprot.writeFieldBegin('RequiredService', TType.STRUCT, 1)
            self.RequiredService.write(oprot)
            oprot.writeFieldEnd()
        if self.ConfigChildNodesProvidingRequiredService is not None:
            oprot.writeFieldBegin('ConfigChildNodesProvidingRequiredService', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.ConfigChildNodesProvidingRequiredService))
            for iter55 in self.ConfigChildNodesProvidingRequiredService:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConfigCompositionTree(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - Nodes
     - Root
    """


    def __init__(self, GUID=None, Name="", Description="", Nodes=[
    ], Root=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        if Nodes is self.thrift_spec[4][4]:
            Nodes = [
            ]
        self.Nodes = Nodes
        self.Root = Root

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Nodes = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = TConfigTreeNode()
                        _elem61.read(iprot)
                        self.Nodes.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.Root = TConfigTreeNode()
                    self.Root.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConfigCompositionTree')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Nodes is not None:
            oprot.writeFieldBegin('Nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.Nodes))
            for iter62 in self.Nodes:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Root is not None:
            oprot.writeFieldBegin('Root', TType.STRUCT, 5)
            self.Root.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSystemOfSystemsConfig(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - AppServiceProvidingConfiguration
     - ConfigCompositionTrees
    """


    def __init__(self, GUID=None, Name="", Description="", AppServiceProvidingConfiguration=None, ConfigCompositionTrees=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.AppServiceProvidingConfiguration = AppServiceProvidingConfiguration
        if ConfigCompositionTrees is self.thrift_spec[5][4]:
            ConfigCompositionTrees = [
            ]
        self.ConfigCompositionTrees = ConfigCompositionTrees

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.AppServiceProvidingConfiguration = TConfiguration()
                    self.AppServiceProvidingConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ConfigCompositionTrees = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = TConfigCompositionTree()
                        _elem68.read(iprot)
                        self.ConfigCompositionTrees.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSystemOfSystemsConfig')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.AppServiceProvidingConfiguration is not None:
            oprot.writeFieldBegin('AppServiceProvidingConfiguration', TType.STRUCT, 4)
            self.AppServiceProvidingConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.ConfigCompositionTrees is not None:
            oprot.writeFieldBegin('ConfigCompositionTrees', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.ConfigCompositionTrees))
            for iter69 in self.ConfigCompositionTrees:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSystemOfSystem(object):
    """
    Attributes:
     - ApplicationServiceProvidingSystem
     - ContributingSystems
     - SystemOfSystemsConfigs
    """


    def __init__(self, ApplicationServiceProvidingSystem=None, ContributingSystems=[
    ], SystemOfSystemsConfigs=[
    ],):
        self.ApplicationServiceProvidingSystem = ApplicationServiceProvidingSystem
        if ContributingSystems is self.thrift_spec[2][4]:
            ContributingSystems = [
            ]
        self.ContributingSystems = ContributingSystems
        if SystemOfSystemsConfigs is self.thrift_spec[3][4]:
            SystemOfSystemsConfigs = [
            ]
        self.SystemOfSystemsConfigs = SystemOfSystemsConfigs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ApplicationServiceProvidingSystem = TSystem()
                    self.ApplicationServiceProvidingSystem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ContributingSystems = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = TSystem()
                        _elem75.read(iprot)
                        self.ContributingSystems.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.SystemOfSystemsConfigs = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = TSystemOfSystemsConfig()
                        _elem81.read(iprot)
                        self.SystemOfSystemsConfigs.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSystemOfSystem')
        if self.ApplicationServiceProvidingSystem is not None:
            oprot.writeFieldBegin('ApplicationServiceProvidingSystem', TType.STRUCT, 1)
            self.ApplicationServiceProvidingSystem.write(oprot)
            oprot.writeFieldEnd()
        if self.ContributingSystems is not None:
            oprot.writeFieldBegin('ContributingSystems', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.ContributingSystems))
            for iter82 in self.ContributingSystems:
                iter82.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SystemOfSystemsConfigs is not None:
            oprot.writeFieldBegin('SystemOfSystemsConfigs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.SystemOfSystemsConfigs))
            for iter83 in self.SystemOfSystemsConfigs:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TBaseElementUnion(object):
    """
    Attributes:
     - IntegrityLevel
     - SafetyProperty
     - SafetyPropertyType
     - Refinement
     - System
     - Service
     - Configuration
     - FunctionalServiceType
     - SystemOfSystemsConfig
     - ConfigCompositionTree
     - ConfigTreeNode
     - ConSertInternalElement
     - ConSert
    """


    def __init__(self, IntegrityLevel=None, SafetyProperty=None, SafetyPropertyType=None, Refinement=None, System=None, Service=None, Configuration=None, FunctionalServiceType=None, SystemOfSystemsConfig=None, ConfigCompositionTree=None, ConfigTreeNode=None, ConSertInternalElement=None, ConSert=None,):
        self.IntegrityLevel = IntegrityLevel
        self.SafetyProperty = SafetyProperty
        self.SafetyPropertyType = SafetyPropertyType
        self.Refinement = Refinement
        self.System = System
        self.Service = Service
        self.Configuration = Configuration
        self.FunctionalServiceType = FunctionalServiceType
        self.SystemOfSystemsConfig = SystemOfSystemsConfig
        self.ConfigCompositionTree = ConfigCompositionTree
        self.ConfigTreeNode = ConfigTreeNode
        self.ConSertInternalElement = ConSertInternalElement
        self.ConSert = ConSert

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.IntegrityLevel = TIntegrityLevel()
                    self.IntegrityLevel.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.SafetyProperty = TSafetyProperty()
                    self.SafetyProperty.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.SafetyPropertyType = TSafetyPropertyType()
                    self.SafetyPropertyType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Refinement = TRefinement()
                    self.Refinement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.System = TSystem()
                    self.System.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.Service = TAbstractService()
                    self.Service.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.Configuration = TConfiguration()
                    self.Configuration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.FunctionalServiceType = TFunctionalServiceType()
                    self.FunctionalServiceType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.SystemOfSystemsConfig = TSystemOfSystemsConfig()
                    self.SystemOfSystemsConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.ConfigCompositionTree = TConfigCompositionTree()
                    self.ConfigCompositionTree.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.ConfigTreeNode = TConfigTreeNode()
                    self.ConfigTreeNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.ConSertInternalElement = TAbstractConSertInternalElement()
                    self.ConSertInternalElement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.ConSert = TConSert()
                    self.ConSert.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBaseElementUnion')
        if self.IntegrityLevel is not None:
            oprot.writeFieldBegin('IntegrityLevel', TType.STRUCT, 1)
            self.IntegrityLevel.write(oprot)
            oprot.writeFieldEnd()
        if self.SafetyProperty is not None:
            oprot.writeFieldBegin('SafetyProperty', TType.STRUCT, 2)
            self.SafetyProperty.write(oprot)
            oprot.writeFieldEnd()
        if self.SafetyPropertyType is not None:
            oprot.writeFieldBegin('SafetyPropertyType', TType.STRUCT, 3)
            self.SafetyPropertyType.write(oprot)
            oprot.writeFieldEnd()
        if self.Refinement is not None:
            oprot.writeFieldBegin('Refinement', TType.STRUCT, 4)
            self.Refinement.write(oprot)
            oprot.writeFieldEnd()
        if self.System is not None:
            oprot.writeFieldBegin('System', TType.STRUCT, 5)
            self.System.write(oprot)
            oprot.writeFieldEnd()
        if self.Service is not None:
            oprot.writeFieldBegin('Service', TType.STRUCT, 6)
            self.Service.write(oprot)
            oprot.writeFieldEnd()
        if self.Configuration is not None:
            oprot.writeFieldBegin('Configuration', TType.STRUCT, 7)
            self.Configuration.write(oprot)
            oprot.writeFieldEnd()
        if self.FunctionalServiceType is not None:
            oprot.writeFieldBegin('FunctionalServiceType', TType.STRUCT, 8)
            self.FunctionalServiceType.write(oprot)
            oprot.writeFieldEnd()
        if self.SystemOfSystemsConfig is not None:
            oprot.writeFieldBegin('SystemOfSystemsConfig', TType.STRUCT, 9)
            self.SystemOfSystemsConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.ConfigCompositionTree is not None:
            oprot.writeFieldBegin('ConfigCompositionTree', TType.STRUCT, 10)
            self.ConfigCompositionTree.write(oprot)
            oprot.writeFieldEnd()
        if self.ConfigTreeNode is not None:
            oprot.writeFieldBegin('ConfigTreeNode', TType.STRUCT, 11)
            self.ConfigTreeNode.write(oprot)
            oprot.writeFieldEnd()
        if self.ConSertInternalElement is not None:
            oprot.writeFieldBegin('ConSertInternalElement', TType.STRUCT, 13)
            self.ConSertInternalElement.write(oprot)
            oprot.writeFieldEnd()
        if self.ConSert is not None:
            oprot.writeFieldBegin('ConSert', TType.STRUCT, 14)
            self.ConSert.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAbstractBaseElement(object):
    """
    Attributes:
     - UsedBaseElement
     - UsedBaseElementType
    """


    def __init__(self, UsedBaseElement=None, UsedBaseElementType=None,):
        self.UsedBaseElement = UsedBaseElement
        self.UsedBaseElementType = UsedBaseElementType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.UsedBaseElement = TBaseElementUnion()
                    self.UsedBaseElement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.UsedBaseElementType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAbstractBaseElement')
        if self.UsedBaseElement is not None:
            oprot.writeFieldBegin('UsedBaseElement', TType.STRUCT, 1)
            self.UsedBaseElement.write(oprot)
            oprot.writeFieldEnd()
        if self.UsedBaseElementType is not None:
            oprot.writeFieldBegin('UsedBaseElementType', TType.I32, 2)
            oprot.writeI32(self.UsedBaseElementType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TIntegrityLevel(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - ASILLevel
     - SILLevel
     - AgPLLevel
     - IntegrityType
    """


    def __init__(self, GUID=None, Name="", Description="", ASILLevel=None, SILLevel=None, AgPLLevel=None, IntegrityType=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.ASILLevel = ASILLevel
        self.SILLevel = SILLevel
        self.AgPLLevel = AgPLLevel
        self.IntegrityType = IntegrityType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ASILLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.SILLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.AgPLLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.IntegrityType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TIntegrityLevel')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.ASILLevel is not None:
            oprot.writeFieldBegin('ASILLevel', TType.I32, 4)
            oprot.writeI32(self.ASILLevel)
            oprot.writeFieldEnd()
        if self.SILLevel is not None:
            oprot.writeFieldBegin('SILLevel', TType.I32, 5)
            oprot.writeI32(self.SILLevel)
            oprot.writeFieldEnd()
        if self.AgPLLevel is not None:
            oprot.writeFieldBegin('AgPLLevel', TType.I32, 6)
            oprot.writeI32(self.AgPLLevel)
            oprot.writeFieldEnd()
        if self.IntegrityType is not None:
            oprot.writeFieldBegin('IntegrityType', TType.I32, 7)
            oprot.writeI32(self.IntegrityType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConSertInternalElementUnion(object):
    """
    Attributes:
     - AbstractSafetyRequirement
     - RuntimeEvidence
     - Invariant
     - ConSertGate
    """


    def __init__(self, AbstractSafetyRequirement=None, RuntimeEvidence=None, Invariant=None, ConSertGate=None,):
        self.AbstractSafetyRequirement = AbstractSafetyRequirement
        self.RuntimeEvidence = RuntimeEvidence
        self.Invariant = Invariant
        self.ConSertGate = ConSertGate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.AbstractSafetyRequirement = TAbstractSafetyRequirement()
                    self.AbstractSafetyRequirement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.RuntimeEvidence = TRuntimeEvidence()
                    self.RuntimeEvidence.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Invariant = TInvariant()
                    self.Invariant.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ConSertGate = TConSertGate()
                    self.ConSertGate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConSertInternalElementUnion')
        if self.AbstractSafetyRequirement is not None:
            oprot.writeFieldBegin('AbstractSafetyRequirement', TType.STRUCT, 1)
            self.AbstractSafetyRequirement.write(oprot)
            oprot.writeFieldEnd()
        if self.RuntimeEvidence is not None:
            oprot.writeFieldBegin('RuntimeEvidence', TType.STRUCT, 2)
            self.RuntimeEvidence.write(oprot)
            oprot.writeFieldEnd()
        if self.Invariant is not None:
            oprot.writeFieldBegin('Invariant', TType.STRUCT, 3)
            self.Invariant.write(oprot)
            oprot.writeFieldEnd()
        if self.ConSertGate is not None:
            oprot.writeFieldBegin('ConSertGate', TType.STRUCT, 4)
            self.ConSertGate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAbstractConSertInternalElement(object):
    """
    Attributes:
     - UsedConSertInternalElement
     - UsedConSertInternalElementType
    """


    def __init__(self, UsedConSertInternalElement=None, UsedConSertInternalElementType=None,):
        self.UsedConSertInternalElement = UsedConSertInternalElement
        self.UsedConSertInternalElementType = UsedConSertInternalElementType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.UsedConSertInternalElement = TConSertInternalElementUnion()
                    self.UsedConSertInternalElement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.UsedConSertInternalElementType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAbstractConSertInternalElement')
        if self.UsedConSertInternalElement is not None:
            oprot.writeFieldBegin('UsedConSertInternalElement', TType.STRUCT, 1)
            self.UsedConSertInternalElement.write(oprot)
            oprot.writeFieldEnd()
        if self.UsedConSertInternalElementType is not None:
            oprot.writeFieldBegin('UsedConSertInternalElementType', TType.I32, 2)
            oprot.writeI32(self.UsedConSertInternalElementType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSafetyRequirementUnion(object):
    """
    Attributes:
     - Guarantee
     - Demand
    """


    def __init__(self, Guarantee=None, Demand=None,):
        self.Guarantee = Guarantee
        self.Demand = Demand

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.Guarantee = TGuarantee()
                    self.Guarantee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.Demand = TDemand()
                    self.Demand.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSafetyRequirementUnion')
        if self.Guarantee is not None:
            oprot.writeFieldBegin('Guarantee', TType.STRUCT, 1)
            self.Guarantee.write(oprot)
            oprot.writeFieldEnd()
        if self.Demand is not None:
            oprot.writeFieldBegin('Demand', TType.STRUCT, 2)
            self.Demand.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAbstractSafetyRequirement(object):
    """
    Attributes:
     - UsedSafetyRequirement
     - UsedSafetyRequirementType
    """


    def __init__(self, UsedSafetyRequirement=None, UsedSafetyRequirementType=None,):
        self.UsedSafetyRequirement = UsedSafetyRequirement
        self.UsedSafetyRequirementType = UsedSafetyRequirementType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.UsedSafetyRequirement = TSafetyRequirementUnion()
                    self.UsedSafetyRequirement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.UsedSafetyRequirementType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAbstractSafetyRequirement')
        if self.UsedSafetyRequirement is not None:
            oprot.writeFieldBegin('UsedSafetyRequirement', TType.STRUCT, 1)
            self.UsedSafetyRequirement.write(oprot)
            oprot.writeFieldEnd()
        if self.UsedSafetyRequirementType is not None:
            oprot.writeFieldBegin('UsedSafetyRequirementType', TType.I32, 2)
            oprot.writeI32(self.UsedSafetyRequirementType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGuarantee(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - PropagationValue
     - IntegrityLevel
     - SafetyProperties
     - IsDefaultGuarantee
     - Ranking
    """


    def __init__(self, GUID=None, Name="", Description="", PropagationValue=None, IntegrityLevel=None, SafetyProperties=[
    ], IsDefaultGuarantee=None, Ranking=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.PropagationValue = PropagationValue
        self.IntegrityLevel = IntegrityLevel
        if SafetyProperties is self.thrift_spec[6][4]:
            SafetyProperties = [
            ]
        self.SafetyProperties = SafetyProperties
        self.IsDefaultGuarantee = IsDefaultGuarantee
        self.Ranking = Ranking

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.PropagationValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.IntegrityLevel = TIntegrityLevel()
                    self.IntegrityLevel.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.SafetyProperties = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = TSafetyProperty()
                        _elem89.read(iprot)
                        self.SafetyProperties.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.IsDefaultGuarantee = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.Ranking = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGuarantee')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.PropagationValue is not None:
            oprot.writeFieldBegin('PropagationValue', TType.BOOL, 4)
            oprot.writeBool(self.PropagationValue)
            oprot.writeFieldEnd()
        if self.IntegrityLevel is not None:
            oprot.writeFieldBegin('IntegrityLevel', TType.STRUCT, 5)
            self.IntegrityLevel.write(oprot)
            oprot.writeFieldEnd()
        if self.SafetyProperties is not None:
            oprot.writeFieldBegin('SafetyProperties', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.SafetyProperties))
            for iter90 in self.SafetyProperties:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.IsDefaultGuarantee is not None:
            oprot.writeFieldBegin('IsDefaultGuarantee', TType.BOOL, 7)
            oprot.writeBool(self.IsDefaultGuarantee)
            oprot.writeFieldEnd()
        if self.Ranking is not None:
            oprot.writeFieldBegin('Ranking', TType.I32, 8)
            oprot.writeI32(self.Ranking)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDemand(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - PropagationValue
     - IntegrityLevel
     - SafetyProperties
    """


    def __init__(self, GUID=None, Name="", Description="", PropagationValue=None, IntegrityLevel=None, SafetyProperties=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.PropagationValue = PropagationValue
        self.IntegrityLevel = IntegrityLevel
        if SafetyProperties is self.thrift_spec[6][4]:
            SafetyProperties = [
            ]
        self.SafetyProperties = SafetyProperties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.PropagationValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.IntegrityLevel = TIntegrityLevel()
                    self.IntegrityLevel.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.SafetyProperties = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = TSafetyProperty()
                        _elem96.read(iprot)
                        self.SafetyProperties.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDemand')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.PropagationValue is not None:
            oprot.writeFieldBegin('PropagationValue', TType.BOOL, 4)
            oprot.writeBool(self.PropagationValue)
            oprot.writeFieldEnd()
        if self.IntegrityLevel is not None:
            oprot.writeFieldBegin('IntegrityLevel', TType.STRUCT, 5)
            self.IntegrityLevel.write(oprot)
            oprot.writeFieldEnd()
        if self.SafetyProperties is not None:
            oprot.writeFieldBegin('SafetyProperties', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.SafetyProperties))
            for iter97 in self.SafetyProperties:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRuntimeEvidence(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - PropagationValue
    """


    def __init__(self, GUID=None, Name="", Description="", PropagationValue=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.PropagationValue = PropagationValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.PropagationValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRuntimeEvidence')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.PropagationValue is not None:
            oprot.writeFieldBegin('PropagationValue', TType.BOOL, 4)
            oprot.writeBool(self.PropagationValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TInvariant(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - PropagationValue
    """


    def __init__(self, GUID=None, Name="", Description="", PropagationValue=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.PropagationValue = PropagationValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.PropagationValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TInvariant')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.PropagationValue is not None:
            oprot.writeFieldBegin('PropagationValue', TType.BOOL, 4)
            oprot.writeBool(self.PropagationValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConSertGate(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - PropagationValue
     - GateType
    """


    def __init__(self, GUID=None, Name="", Description="", PropagationValue=None, GateType=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.PropagationValue = PropagationValue
        self.GateType = GateType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.PropagationValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.GateType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConSertGate')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.PropagationValue is not None:
            oprot.writeFieldBegin('PropagationValue', TType.BOOL, 4)
            oprot.writeBool(self.PropagationValue)
            oprot.writeFieldEnd()
        if self.GateType is not None:
            oprot.writeFieldBegin('GateType', TType.I32, 5)
            oprot.writeI32(self.GateType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGuaranteePropagation(object):
    """
    Attributes:
     - SourceElement
     - TargetElement
    """


    def __init__(self, SourceElement=None, TargetElement=None,):
        self.SourceElement = SourceElement
        self.TargetElement = TargetElement

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.SourceElement = TAbstractConSertInternalElement()
                    self.SourceElement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.TargetElement = TAbstractConSertInternalElement()
                    self.TargetElement.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGuaranteePropagation')
        if self.SourceElement is not None:
            oprot.writeFieldBegin('SourceElement', TType.STRUCT, 1)
            self.SourceElement.write(oprot)
            oprot.writeFieldEnd()
        if self.TargetElement is not None:
            oprot.writeFieldBegin('TargetElement', TType.STRUCT, 2)
            self.TargetElement.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConSert(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - Guarantees
     - Demands
     - RuntimeEvidences
     - Invariant
     - Gates
     - GuaranteePropagation
    """


    def __init__(self, GUID=None, Name="", Description="", Guarantees=[
    ], Demands=[
    ], RuntimeEvidences=[
    ], Invariant=None, Gates=[
    ], GuaranteePropagation=[
    ],):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        if Guarantees is self.thrift_spec[4][4]:
            Guarantees = [
            ]
        self.Guarantees = Guarantees
        if Demands is self.thrift_spec[5][4]:
            Demands = [
            ]
        self.Demands = Demands
        if RuntimeEvidences is self.thrift_spec[6][4]:
            RuntimeEvidences = [
            ]
        self.RuntimeEvidences = RuntimeEvidences
        self.Invariant = Invariant
        if Gates is self.thrift_spec[8][4]:
            Gates = [
            ]
        self.Gates = Gates
        if GuaranteePropagation is self.thrift_spec[9][4]:
            GuaranteePropagation = [
            ]
        self.GuaranteePropagation = GuaranteePropagation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Guarantees = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = TGuarantee()
                        _elem103.read(iprot)
                        self.Guarantees.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Demands = []
                    (_etype107, _size104) = iprot.readListBegin()
                    for _i108 in range(_size104):
                        _elem109 = TDemand()
                        _elem109.read(iprot)
                        self.Demands.append(_elem109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.RuntimeEvidences = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = TRuntimeEvidence()
                        _elem115.read(iprot)
                        self.RuntimeEvidences.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.Invariant = TInvariant()
                    self.Invariant.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.Gates = []
                    (_etype119, _size116) = iprot.readListBegin()
                    for _i120 in range(_size116):
                        _elem121 = TConSertGate()
                        _elem121.read(iprot)
                        self.Gates.append(_elem121)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.GuaranteePropagation = []
                    (_etype125, _size122) = iprot.readListBegin()
                    for _i126 in range(_size122):
                        _elem127 = TGuaranteePropagation()
                        _elem127.read(iprot)
                        self.GuaranteePropagation.append(_elem127)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConSert')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Guarantees is not None:
            oprot.writeFieldBegin('Guarantees', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.Guarantees))
            for iter128 in self.Guarantees:
                iter128.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Demands is not None:
            oprot.writeFieldBegin('Demands', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.Demands))
            for iter129 in self.Demands:
                iter129.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.RuntimeEvidences is not None:
            oprot.writeFieldBegin('RuntimeEvidences', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.RuntimeEvidences))
            for iter130 in self.RuntimeEvidences:
                iter130.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Invariant is not None:
            oprot.writeFieldBegin('Invariant', TType.STRUCT, 7)
            self.Invariant.write(oprot)
            oprot.writeFieldEnd()
        if self.Gates is not None:
            oprot.writeFieldBegin('Gates', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.Gates))
            for iter131 in self.Gates:
                iter131.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.GuaranteePropagation is not None:
            oprot.writeFieldBegin('GuaranteePropagation', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.GuaranteePropagation))
            for iter132 in self.GuaranteePropagation:
                iter132.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSafetyProperty(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
     - Refinement
     - SafetyPropertyType
     - IntegrityLevel
    """


    def __init__(self, GUID=None, Name="", Description="", Refinement=None, SafetyPropertyType=None, IntegrityLevel=None,):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description
        self.Refinement = Refinement
        self.SafetyPropertyType = SafetyPropertyType
        self.IntegrityLevel = IntegrityLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Refinement = TRefinement()
                    self.Refinement.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.SafetyPropertyType = TSafetyPropertyType()
                    self.SafetyPropertyType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.IntegrityLevel = TIntegrityLevel()
                    self.IntegrityLevel.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSafetyProperty')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Refinement is not None:
            oprot.writeFieldBegin('Refinement', TType.STRUCT, 4)
            self.Refinement.write(oprot)
            oprot.writeFieldEnd()
        if self.SafetyPropertyType is not None:
            oprot.writeFieldBegin('SafetyPropertyType', TType.STRUCT, 5)
            self.SafetyPropertyType.write(oprot)
            oprot.writeFieldEnd()
        if self.IntegrityLevel is not None:
            oprot.writeFieldBegin('IntegrityLevel', TType.STRUCT, 6)
            self.IntegrityLevel.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSafetyPropertyType(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
    """


    def __init__(self, GUID=None, Name="", Description="",):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSafetyPropertyType')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRefinement(object):
    """
    Attributes:
     - GUID
     - Name
     - Description
    """


    def __init__(self, GUID=None, Name="", Description="",):
        self.GUID = GUID
        self.Name = Name
        self.Description = Description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.GUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRefinement')
        if self.GUID is not None:
            oprot.writeFieldBegin('GUID', TType.STRING, 1)
            oprot.writeString(self.GUID.encode('utf-8') if sys.version_info[0] == 2 else self.GUID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConstituentSystemValidationFailedException(object):
    """
    Attributes:
     - ValidationViolationMessages
    """


    def __init__(self, ValidationViolationMessages=[
    ],):
        if ValidationViolationMessages is self.thrift_spec[1][4]:
            ValidationViolationMessages = [
            ]
        self.ValidationViolationMessages = ValidationViolationMessages

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ValidationViolationMessages = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = TConstituentSystemValidationViolationMessage()
                        _elem138.read(iprot)
                        self.ValidationViolationMessages.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConstituentSystemValidationFailedException')
        if self.ValidationViolationMessages is not None:
            oprot.writeFieldBegin('ValidationViolationMessages', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ValidationViolationMessages))
            for iter139 in self.ValidationViolationMessages:
                iter139.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConstituentSystemValidationViolationMessage(object):
    """
    Attributes:
     - Context
     - Message
    """


    def __init__(self, Context="", Message="",):
        self.Context = Context
        self.Message = Message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Context = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConstituentSystemValidationViolationMessage')
        if self.Context is not None:
            oprot.writeFieldBegin('Context', TType.STRING, 1)
            oprot.writeString(self.Context.encode('utf-8') if sys.version_info[0] == 2 else self.Context)
            oprot.writeFieldEnd()
        if self.Message is not None:
            oprot.writeFieldBegin('Message', TType.STRING, 2)
            oprot.writeString(self.Message.encode('utf-8') if sys.version_info[0] == 2 else self.Message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAbstractEpsilonScriptExecutionException(TException):
    """
    Attributes:
     - UsedException
     - UsedExceptionType
    """


    def __init__(self, UsedException=None, UsedExceptionType=None,):
        self.UsedException = UsedException
        self.UsedExceptionType = UsedExceptionType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.UsedException = TEpsilonScriptExecutionExceptionUnion()
                    self.UsedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.UsedExceptionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAbstractEpsilonScriptExecutionException')
        if self.UsedException is not None:
            oprot.writeFieldBegin('UsedException', TType.STRUCT, 1)
            self.UsedException.write(oprot)
            oprot.writeFieldEnd()
        if self.UsedExceptionType is not None:
            oprot.writeFieldBegin('UsedExceptionType', TType.I32, 2)
            oprot.writeI32(self.UsedExceptionType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TEpsilonScriptExecutionExceptionUnion(object):
    """
    Attributes:
     - ContributingSystemValidationFailedException
     - EpsilonScriptExecutionException
    """


    def __init__(self, ContributingSystemValidationFailedException=None, EpsilonScriptExecutionException=None,):
        self.ContributingSystemValidationFailedException = ContributingSystemValidationFailedException
        self.EpsilonScriptExecutionException = EpsilonScriptExecutionException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ContributingSystemValidationFailedException = TConstituentSystemValidationFailedException()
                    self.ContributingSystemValidationFailedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.EpsilonScriptExecutionException = TEpsilonScriptExecutionException()
                    self.EpsilonScriptExecutionException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TEpsilonScriptExecutionExceptionUnion')
        if self.ContributingSystemValidationFailedException is not None:
            oprot.writeFieldBegin('ContributingSystemValidationFailedException', TType.STRUCT, 1)
            self.ContributingSystemValidationFailedException.write(oprot)
            oprot.writeFieldEnd()
        if self.EpsilonScriptExecutionException is not None:
            oprot.writeFieldBegin('EpsilonScriptExecutionException', TType.STRUCT, 2)
            self.EpsilonScriptExecutionException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TEpsilonScriptExecutionException(object):
    """
    Attributes:
     - Message
    """


    def __init__(self, Message="",):
        self.Message = Message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TEpsilonScriptExecutionException')
        if self.Message is not None:
            oprot.writeFieldBegin('Message', TType.STRING, 1)
            oprot.writeString(self.Message.encode('utf-8') if sys.version_info[0] == 2 else self.Message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConSertEvaluationConfiguration(object):
    """
    Attributes:
     - ContributingModelFileInformation
     - ValidRuntimeEvidenceIds
    """


    def __init__(self, ContributingModelFileInformation=[
    ], ValidRuntimeEvidenceIds=[
    ],):
        if ContributingModelFileInformation is self.thrift_spec[1][4]:
            ContributingModelFileInformation = [
            ]
        self.ContributingModelFileInformation = ContributingModelFileInformation
        if ValidRuntimeEvidenceIds is self.thrift_spec[2][4]:
            ValidRuntimeEvidenceIds = [
            ]
        self.ValidRuntimeEvidenceIds = ValidRuntimeEvidenceIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ContributingModelFileInformation = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = TModelFileInformation()
                        _elem145.read(iprot)
                        self.ContributingModelFileInformation.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ValidRuntimeEvidenceIds = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ValidRuntimeEvidenceIds.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConSertEvaluationConfiguration')
        if self.ContributingModelFileInformation is not None:
            oprot.writeFieldBegin('ContributingModelFileInformation', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ContributingModelFileInformation))
            for iter152 in self.ContributingModelFileInformation:
                iter152.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ValidRuntimeEvidenceIds is not None:
            oprot.writeFieldBegin('ValidRuntimeEvidenceIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.ValidRuntimeEvidenceIds))
            for iter153 in self.ValidRuntimeEvidenceIds:
                oprot.writeString(iter153.encode('utf-8') if sys.version_info[0] == 2 else iter153)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TModelFileInformation(object):
    """
    Attributes:
     - ModelFileName
     - SystemId
     - SystemProvidesAppservice
    """


    def __init__(self, ModelFileName="", SystemId="", SystemProvidesAppservice=None,):
        self.ModelFileName = ModelFileName
        self.SystemId = SystemId
        self.SystemProvidesAppservice = SystemProvidesAppservice

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ModelFileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.SystemId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.SystemProvidesAppservice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TModelFileInformation')
        if self.ModelFileName is not None:
            oprot.writeFieldBegin('ModelFileName', TType.STRING, 1)
            oprot.writeString(self.ModelFileName.encode('utf-8') if sys.version_info[0] == 2 else self.ModelFileName)
            oprot.writeFieldEnd()
        if self.SystemId is not None:
            oprot.writeFieldBegin('SystemId', TType.STRING, 2)
            oprot.writeString(self.SystemId.encode('utf-8') if sys.version_info[0] == 2 else self.SystemId)
            oprot.writeFieldEnd()
        if self.SystemProvidesAppservice is not None:
            oprot.writeFieldBegin('SystemProvidesAppservice', TType.BOOL, 3)
            oprot.writeBool(self.SystemProvidesAppservice)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TConSertEvaluationResult(object):
    """
    Attributes:
     - ChoosenSystemConfigurationsByGuaranteedProvidedService
    """


    def __init__(self, ChoosenSystemConfigurationsByGuaranteedProvidedService=[
    ],):
        if ChoosenSystemConfigurationsByGuaranteedProvidedService is self.thrift_spec[1][4]:
            ChoosenSystemConfigurationsByGuaranteedProvidedService = [
            ]
        self.ChoosenSystemConfigurationsByGuaranteedProvidedService = ChoosenSystemConfigurationsByGuaranteedProvidedService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ChoosenSystemConfigurationsByGuaranteedProvidedService = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = TInformationAboutProvidedAppService()
                        _elem159.read(iprot)
                        self.ChoosenSystemConfigurationsByGuaranteedProvidedService.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TConSertEvaluationResult')
        if self.ChoosenSystemConfigurationsByGuaranteedProvidedService is not None:
            oprot.writeFieldBegin('ChoosenSystemConfigurationsByGuaranteedProvidedService', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ChoosenSystemConfigurationsByGuaranteedProvidedService))
            for iter160 in self.ChoosenSystemConfigurationsByGuaranteedProvidedService:
                iter160.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TInformationAboutProvidedAppService(object):
    """
    Attributes:
     - ProvidedServiceId
     - ProvidedServiceName
     - GuaranteeId
     - GuaranteeName
     - ChoosenSystemConfigurations
    """


    def __init__(self, ProvidedServiceId="", ProvidedServiceName="", GuaranteeId="", GuaranteeName="", ChoosenSystemConfigurations=[
    ],):
        self.ProvidedServiceId = ProvidedServiceId
        self.ProvidedServiceName = ProvidedServiceName
        self.GuaranteeId = GuaranteeId
        self.GuaranteeName = GuaranteeName
        if ChoosenSystemConfigurations is self.thrift_spec[5][4]:
            ChoosenSystemConfigurations = [
            ]
        self.ChoosenSystemConfigurations = ChoosenSystemConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ProvidedServiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ProvidedServiceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.GuaranteeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.GuaranteeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ChoosenSystemConfigurations = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = TChoosenSystemConfiguration()
                        _elem166.read(iprot)
                        self.ChoosenSystemConfigurations.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TInformationAboutProvidedAppService')
        if self.ProvidedServiceId is not None:
            oprot.writeFieldBegin('ProvidedServiceId', TType.STRING, 1)
            oprot.writeString(self.ProvidedServiceId.encode('utf-8') if sys.version_info[0] == 2 else self.ProvidedServiceId)
            oprot.writeFieldEnd()
        if self.ProvidedServiceName is not None:
            oprot.writeFieldBegin('ProvidedServiceName', TType.STRING, 2)
            oprot.writeString(self.ProvidedServiceName.encode('utf-8') if sys.version_info[0] == 2 else self.ProvidedServiceName)
            oprot.writeFieldEnd()
        if self.GuaranteeId is not None:
            oprot.writeFieldBegin('GuaranteeId', TType.STRING, 3)
            oprot.writeString(self.GuaranteeId.encode('utf-8') if sys.version_info[0] == 2 else self.GuaranteeId)
            oprot.writeFieldEnd()
        if self.GuaranteeName is not None:
            oprot.writeFieldBegin('GuaranteeName', TType.STRING, 4)
            oprot.writeString(self.GuaranteeName.encode('utf-8') if sys.version_info[0] == 2 else self.GuaranteeName)
            oprot.writeFieldEnd()
        if self.ChoosenSystemConfigurations is not None:
            oprot.writeFieldBegin('ChoosenSystemConfigurations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.ChoosenSystemConfigurations))
            for iter167 in self.ChoosenSystemConfigurations:
                iter167.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TChoosenSystemConfiguration(object):
    """
    Attributes:
     - SystemId
     - SystemName
     - ConfigurationId
     - ConfigurationName
    """


    def __init__(self, SystemId="", SystemName="", ConfigurationId="", ConfigurationName="",):
        self.SystemId = SystemId
        self.SystemName = SystemName
        self.ConfigurationId = ConfigurationId
        self.ConfigurationName = ConfigurationName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.SystemId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.SystemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ConfigurationId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ConfigurationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TChoosenSystemConfiguration')
        if self.SystemId is not None:
            oprot.writeFieldBegin('SystemId', TType.STRING, 1)
            oprot.writeString(self.SystemId.encode('utf-8') if sys.version_info[0] == 2 else self.SystemId)
            oprot.writeFieldEnd()
        if self.SystemName is not None:
            oprot.writeFieldBegin('SystemName', TType.STRING, 2)
            oprot.writeString(self.SystemName.encode('utf-8') if sys.version_info[0] == 2 else self.SystemName)
            oprot.writeFieldEnd()
        if self.ConfigurationId is not None:
            oprot.writeFieldBegin('ConfigurationId', TType.STRING, 3)
            oprot.writeString(self.ConfigurationId.encode('utf-8') if sys.version_info[0] == 2 else self.ConfigurationId)
            oprot.writeFieldEnd()
        if self.ConfigurationName is not None:
            oprot.writeFieldBegin('ConfigurationName', TType.STRING, 4)
            oprot.writeString(self.ConfigurationName.encode('utf-8') if sys.version_info[0] == 2 else self.ConfigurationName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TDemandRef)
TDemandRef.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ref', [TDemand, None], None, ),  # 1
)
all_structs.append(TGuaranteeRef)
TGuaranteeRef.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ref', [TGuarantee, None], None, ),  # 1
)
all_structs.append(TRequiredServiceRef)
TRequiredServiceRef.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ref', [TRequiredService, None], None, ),  # 1
)
all_structs.append(TConfigTreeNodeRef)
TConfigTreeNodeRef.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ref', [TConfigTreeNode, None], None, ),  # 1
)
all_structs.append(TFunctionalServiceType)
TFunctionalServiceType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
)
all_structs.append(TServiceUnion)
TServiceUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'RequiredService', [TRequiredService, None], None, ),  # 1
    (2, TType.STRUCT, 'ProvidedService', [TProvidedService, None], None, ),  # 2
)
all_structs.append(TAbstractService)
TAbstractService.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'UsedService', [TServiceUnion, None], None, ),  # 1
    (2, TType.I32, 'UsedServiceType', None, None, ),  # 2
)
all_structs.append(TRequiredService)
TRequiredService.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.STRUCT, 'FunctionalServiceType', [TFunctionalServiceType, None], None, ),  # 4
    (5, TType.LIST, 'Demands', (TType.STRUCT, [TDemandRef, None], False), [
    ], ),  # 5
)
all_structs.append(TProvidedService)
TProvidedService.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.STRUCT, 'FunctionalServiceType', [TFunctionalServiceType, None], None, ),  # 4
    (5, TType.BOOL, 'IsApplicationService', None, None, ),  # 5
    (6, TType.LIST, 'AllocatedRequiredServices', (TType.STRUCT, [TRequiredServiceRef, None], False), [
    ], ),  # 6
    (7, TType.LIST, 'Guarantees', (TType.STRUCT, [TGuaranteeRef, None], False), [
    ], ),  # 7
)
all_structs.append(TConfiguration)
TConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.I32, 'Ranking', None, None, ),  # 4
    (5, TType.LIST, 'RequiredServices', (TType.STRUCT, [TRequiredService, None], False), [
    ], ),  # 5
    (6, TType.LIST, 'ProvidedServices', (TType.STRUCT, [TProvidedService, None], False), [
    ], ),  # 6
    (7, TType.STRUCT, 'ConSert', [TConSert, None], None, ),  # 7
)
all_structs.append(TSystem)
TSystem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'HasApplicationService', None, None, ),  # 4
    (5, TType.LIST, 'Configurations', (TType.STRUCT, [TConfiguration, None], False), [
    ], ),  # 5
)
all_structs.append(TConfigTreeNode)
TConfigTreeNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'Evaluated', None, None, ),  # 4
    (5, TType.STRUCT, 'Config', [TConfiguration, None], None, ),  # 5
    (6, TType.STRUCT, 'System', [TSystem, None], None, ),  # 6
    (7, TType.LIST, 'RequiredChildNodesRequiredByService', (TType.STRUCT, [TRequiredChildConfigNodesByRequiredService, None], False), [
    ], ),  # 7
)
all_structs.append(TRequiredChildConfigNodesByRequiredService)
TRequiredChildConfigNodesByRequiredService.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'RequiredService', [TRequiredService, None], None, ),  # 1
    (2, TType.LIST, 'ConfigChildNodesProvidingRequiredService', (TType.STRUCT, [TConfigTreeNodeRef, None], False), [
    ], ),  # 2
)
all_structs.append(TConfigCompositionTree)
TConfigCompositionTree.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.LIST, 'Nodes', (TType.STRUCT, [TConfigTreeNode, None], False), [
    ], ),  # 4
    (5, TType.STRUCT, 'Root', [TConfigTreeNode, None], None, ),  # 5
)
all_structs.append(TSystemOfSystemsConfig)
TSystemOfSystemsConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.STRUCT, 'AppServiceProvidingConfiguration', [TConfiguration, None], None, ),  # 4
    (5, TType.LIST, 'ConfigCompositionTrees', (TType.STRUCT, [TConfigCompositionTree, None], False), [
    ], ),  # 5
)
all_structs.append(TSystemOfSystem)
TSystemOfSystem.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ApplicationServiceProvidingSystem', [TSystem, None], None, ),  # 1
    (2, TType.LIST, 'ContributingSystems', (TType.STRUCT, [TSystem, None], False), [
    ], ),  # 2
    (3, TType.LIST, 'SystemOfSystemsConfigs', (TType.STRUCT, [TSystemOfSystemsConfig, None], False), [
    ], ),  # 3
)
all_structs.append(TBaseElementUnion)
TBaseElementUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'IntegrityLevel', [TIntegrityLevel, None], None, ),  # 1
    (2, TType.STRUCT, 'SafetyProperty', [TSafetyProperty, None], None, ),  # 2
    (3, TType.STRUCT, 'SafetyPropertyType', [TSafetyPropertyType, None], None, ),  # 3
    (4, TType.STRUCT, 'Refinement', [TRefinement, None], None, ),  # 4
    (5, TType.STRUCT, 'System', [TSystem, None], None, ),  # 5
    (6, TType.STRUCT, 'Service', [TAbstractService, None], None, ),  # 6
    (7, TType.STRUCT, 'Configuration', [TConfiguration, None], None, ),  # 7
    (8, TType.STRUCT, 'FunctionalServiceType', [TFunctionalServiceType, None], None, ),  # 8
    (9, TType.STRUCT, 'SystemOfSystemsConfig', [TSystemOfSystemsConfig, None], None, ),  # 9
    (10, TType.STRUCT, 'ConfigCompositionTree', [TConfigCompositionTree, None], None, ),  # 10
    (11, TType.STRUCT, 'ConfigTreeNode', [TConfigTreeNode, None], None, ),  # 11
    None,  # 12
    (13, TType.STRUCT, 'ConSertInternalElement', [TAbstractConSertInternalElement, None], None, ),  # 13
    (14, TType.STRUCT, 'ConSert', [TConSert, None], None, ),  # 14
)
all_structs.append(TAbstractBaseElement)
TAbstractBaseElement.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'UsedBaseElement', [TBaseElementUnion, None], None, ),  # 1
    (2, TType.I32, 'UsedBaseElementType', None, None, ),  # 2
)
all_structs.append(TIntegrityLevel)
TIntegrityLevel.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.I32, 'ASILLevel', None, None, ),  # 4
    (5, TType.I32, 'SILLevel', None, None, ),  # 5
    (6, TType.I32, 'AgPLLevel', None, None, ),  # 6
    (7, TType.I32, 'IntegrityType', None, None, ),  # 7
)
all_structs.append(TConSertInternalElementUnion)
TConSertInternalElementUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'AbstractSafetyRequirement', [TAbstractSafetyRequirement, None], None, ),  # 1
    (2, TType.STRUCT, 'RuntimeEvidence', [TRuntimeEvidence, None], None, ),  # 2
    (3, TType.STRUCT, 'Invariant', [TInvariant, None], None, ),  # 3
    (4, TType.STRUCT, 'ConSertGate', [TConSertGate, None], None, ),  # 4
)
all_structs.append(TAbstractConSertInternalElement)
TAbstractConSertInternalElement.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'UsedConSertInternalElement', [TConSertInternalElementUnion, None], None, ),  # 1
    (2, TType.I32, 'UsedConSertInternalElementType', None, None, ),  # 2
)
all_structs.append(TSafetyRequirementUnion)
TSafetyRequirementUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'Guarantee', [TGuarantee, None], None, ),  # 1
    (2, TType.STRUCT, 'Demand', [TDemand, None], None, ),  # 2
)
all_structs.append(TAbstractSafetyRequirement)
TAbstractSafetyRequirement.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'UsedSafetyRequirement', [TSafetyRequirementUnion, None], None, ),  # 1
    (2, TType.I32, 'UsedSafetyRequirementType', None, None, ),  # 2
)
all_structs.append(TGuarantee)
TGuarantee.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'PropagationValue', None, None, ),  # 4
    (5, TType.STRUCT, 'IntegrityLevel', [TIntegrityLevel, None], None, ),  # 5
    (6, TType.LIST, 'SafetyProperties', (TType.STRUCT, [TSafetyProperty, None], False), [
    ], ),  # 6
    (7, TType.BOOL, 'IsDefaultGuarantee', None, None, ),  # 7
    (8, TType.I32, 'Ranking', None, None, ),  # 8
)
all_structs.append(TDemand)
TDemand.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'PropagationValue', None, None, ),  # 4
    (5, TType.STRUCT, 'IntegrityLevel', [TIntegrityLevel, None], None, ),  # 5
    (6, TType.LIST, 'SafetyProperties', (TType.STRUCT, [TSafetyProperty, None], False), [
    ], ),  # 6
)
all_structs.append(TRuntimeEvidence)
TRuntimeEvidence.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'PropagationValue', None, None, ),  # 4
)
all_structs.append(TInvariant)
TInvariant.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'PropagationValue', None, None, ),  # 4
)
all_structs.append(TConSertGate)
TConSertGate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.BOOL, 'PropagationValue', None, None, ),  # 4
    (5, TType.I32, 'GateType', None, None, ),  # 5
)
all_structs.append(TGuaranteePropagation)
TGuaranteePropagation.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'SourceElement', [TAbstractConSertInternalElement, None], None, ),  # 1
    (2, TType.STRUCT, 'TargetElement', [TAbstractConSertInternalElement, None], None, ),  # 2
)
all_structs.append(TConSert)
TConSert.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.LIST, 'Guarantees', (TType.STRUCT, [TGuarantee, None], False), [
    ], ),  # 4
    (5, TType.LIST, 'Demands', (TType.STRUCT, [TDemand, None], False), [
    ], ),  # 5
    (6, TType.LIST, 'RuntimeEvidences', (TType.STRUCT, [TRuntimeEvidence, None], False), [
    ], ),  # 6
    (7, TType.STRUCT, 'Invariant', [TInvariant, None], None, ),  # 7
    (8, TType.LIST, 'Gates', (TType.STRUCT, [TConSertGate, None], False), [
    ], ),  # 8
    (9, TType.LIST, 'GuaranteePropagation', (TType.STRUCT, [TGuaranteePropagation, None], False), [
    ], ),  # 9
)
all_structs.append(TSafetyProperty)
TSafetyProperty.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
    (4, TType.STRUCT, 'Refinement', [TRefinement, None], None, ),  # 4
    (5, TType.STRUCT, 'SafetyPropertyType', [TSafetyPropertyType, None], None, ),  # 5
    (6, TType.STRUCT, 'IntegrityLevel', [TIntegrityLevel, None], None, ),  # 6
)
all_structs.append(TSafetyPropertyType)
TSafetyPropertyType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
)
all_structs.append(TRefinement)
TRefinement.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'GUID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', "", ),  # 3
)
all_structs.append(TConstituentSystemValidationFailedException)
TConstituentSystemValidationFailedException.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ValidationViolationMessages', (TType.STRUCT, [TConstituentSystemValidationViolationMessage, None], False), [
    ], ),  # 1
)
all_structs.append(TConstituentSystemValidationViolationMessage)
TConstituentSystemValidationViolationMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Context', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'Message', 'UTF8', "", ),  # 2
)
all_structs.append(TAbstractEpsilonScriptExecutionException)
TAbstractEpsilonScriptExecutionException.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'UsedException', [TEpsilonScriptExecutionExceptionUnion, None], None, ),  # 1
    (2, TType.I32, 'UsedExceptionType', None, None, ),  # 2
)
all_structs.append(TEpsilonScriptExecutionExceptionUnion)
TEpsilonScriptExecutionExceptionUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ContributingSystemValidationFailedException', [TConstituentSystemValidationFailedException, None], None, ),  # 1
    (2, TType.STRUCT, 'EpsilonScriptExecutionException', [TEpsilonScriptExecutionException, None], None, ),  # 2
)
all_structs.append(TEpsilonScriptExecutionException)
TEpsilonScriptExecutionException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Message', 'UTF8', "", ),  # 1
)
all_structs.append(TConSertEvaluationConfiguration)
TConSertEvaluationConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ContributingModelFileInformation', (TType.STRUCT, [TModelFileInformation, None], False), [
    ], ),  # 1
    (2, TType.LIST, 'ValidRuntimeEvidenceIds', (TType.STRING, 'UTF8', False), [
    ], ),  # 2
)
all_structs.append(TModelFileInformation)
TModelFileInformation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ModelFileName', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'SystemId', 'UTF8', "", ),  # 2
    (3, TType.BOOL, 'SystemProvidesAppservice', None, None, ),  # 3
)
all_structs.append(TConSertEvaluationResult)
TConSertEvaluationResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ChoosenSystemConfigurationsByGuaranteedProvidedService', (TType.STRUCT, [TInformationAboutProvidedAppService, None], False), [
    ], ),  # 1
)
all_structs.append(TInformationAboutProvidedAppService)
TInformationAboutProvidedAppService.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ProvidedServiceId', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'ProvidedServiceName', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'GuaranteeId', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'GuaranteeName', 'UTF8', "", ),  # 4
    (5, TType.LIST, 'ChoosenSystemConfigurations', (TType.STRUCT, [TChoosenSystemConfiguration, None], False), [
    ], ),  # 5
)
all_structs.append(TChoosenSystemConfiguration)
TChoosenSystemConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'SystemId', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'SystemName', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'ConfigurationId', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'ConfigurationName', 'UTF8', "", ),  # 4
)
fix_spec(all_structs)
del all_structs
